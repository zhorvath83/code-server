name: Build and push code-server

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'README.md'

jobs:
  building-code-server:
    runs-on: ubuntu-latest
    env:
        IMAGE: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Determine new image Tag
        id: generate_tag
        run: |
            vnprefix=1.0
            vnsuffix=${{ github.run_number }}
            echo "::set-output name=BUILD_ID::${vnprefix}.${vnsuffix}"

      - name: Get version
        id: vars
        run: |
            echo ::set-output name=version::$(grep "codercom/code-server" Dockerfile | cut -d':' -f 2 | cut -d' ' -f 1 )
            echo ::set-output name=major::$(grep "codercom/code-server" Dockerfile | cut -d':' -f 2 | cut -d' ' -f 1 | cut -d'.' -f 1 )
            echo ::set-output name=minor::$(grep "codercom/code-server" Dockerfile | cut -d':' -f 2 | cut -d' ' -f 1 | cut -d'.' -f 2 )
            echo ::set-output name=patch::$(($(grep "codercom/code-server" Dockerfile | cut -d':' -f 2 | cut -d' ' -f 1 | cut -d'.' -f 3 ) + 100))

      - name: Test output
        run: |
            echo ${{ steps.vars.outputs.version }}
            echo ${{ steps.vars.outputs.major }}
            echo ${{ steps.vars.outputs.minor }}
            echo ${{ steps.vars.outputs.patch }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        id: docker_build_stage
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          platforms: linux/amd64
          tags: ${{ env.IMAGE }}:${{ steps.generate_tag.outputs.BUILD_ID }}
          cache-from: type=registry,ref=${{ env.IMAGE }}:build-cache
          cache-to: type=registry,ref=${{ env.IMAGE }}:build-cache,mode=max

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE }}:${{ steps.generate_tag.outputs.BUILD_ID }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
